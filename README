This lump of stuff is hxlogo, an implementation of the
ancient and venerable xlogo program via Antoine Latter's
most excellent XHB X Haskell Bindings. It supports the most
"important" features of xlogo; in particular it will use the
Render extension to draw an anti-aliased logo when possible.

There are many limitations here. A lightly-patched XHB is
(currently) required to build hxlogo---see the file
xhb-xid.patch in this repo. I suspect hxlogo fails on
big-endian clients, due to needing another XHB patch I
haven't written yet. No flags are supported; hxlogo infers
whether you have the Render extension at an appropriate
version, and proceeds to use either Render or core rendering
on that basis alone. I doubt hxlogo will work without a
window manager running. Its response to most errors is to
unceremoniously crash. It is unlikely that hxlogo will work
on pseudo-color displays; let me know if you find one.

The point of this exercise, of course, was not really to
replace xlogo, which is working just fine thank you very
much. It was to evaluate XHB, and the difficulty of building
atop it.

You will find quite a bit of infrastructure
here. PolyUtils.hs contains a general-purpose representation
of 2D points and lines, and a simple but sufficient
algorithm for cracking a polygon into trapezoids. The little
demo program test-polyutils.hs outputs an SVG file showing
the cracking of a polygon into trapezoids.

Graphics/XHB/Utils.hs contains some generic XHB
convenience functions, and Graphics/XHB/XString.hs contains
some code for dealing with Haskell strings as C length-list
strings. FixedBinary.hs contains some GHC-specific but
hxlogo-independent code for dealing with Data.Fixed types
characterized by an implicit binary point at a given place
in an integral value; Render in particular wants the 16.16
type for some of its operations.

The implementation of hxlogo itself is in the files
hxlogo.hs and RenderLogo.hs. The division of responsibility
between these two files is pretty rough, and could probably
be cleaned up some. The event and error handling is roughly
based on Latter's XHB Demo.hs code, but fancied up a bit. In
particular, the event handling thread is the main program
thread, and there is a state record passed around that
contains some IORefs for things that need to be able to
change dynamically.

I think I've demonstrated that one could, if one chose,
build real apps atop XHB; with the appropriate utility
library, however, this would still probably be a 500 line
program, which is a lot for what it does. The principal
concern remains that everyone wants Cairo for X rendering in
2010: either a strategy has to be adopted for getting XHB to
interoperate with Cairo/XCB (or Cairo/Xlib), or somebody
needs to implement the interesting bits of Cairo (and Pango?
and Xft?) in pure Haskell.

Anyway, it's been a fun week or so building this. I've
learned a lot. I hope you enjoy it and find it useful also.

  Bart Massey
  bart@cs.pdx.edu
  23 December 2010
